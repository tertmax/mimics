//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `20200306_161439.obj`.
    static let _161439Obj = Rswift.FileResource(bundle: R.hostingBundle, name: "20200306_161439", pathExtension: "obj")
    /// Resource file `GameScene.sks`.
    static let gameSceneSks = Rswift.FileResource(bundle: R.hostingBundle, name: "GameScene", pathExtension: "sks")
    /// Resource file `Models.scnassets`.
    static let modelsScnassets = Rswift.FileResource(bundle: R.hostingBundle, name: "Models", pathExtension: "scnassets")
    /// Resource file `VideoTexturedFace.shader`.
    static let videoTexturedFaceShader = Rswift.FileResource(bundle: R.hostingBundle, name: "VideoTexturedFace", pathExtension: "shader")
    /// Resource file `andrii.png`.
    static let andriiPng = Rswift.FileResource(bundle: R.hostingBundle, name: "andrii", pathExtension: "png")
    /// Resource file `andrii.scn`.
    static let andriiScn = Rswift.FileResource(bundle: R.hostingBundle, name: "andrii", pathExtension: "scn")
    /// Resource file `model.mtl`.
    static let modelMtl = Rswift.FileResource(bundle: R.hostingBundle, name: "model", pathExtension: "mtl")

    /// `bundle.url(forResource: "20200306_161439", withExtension: "obj")`
    static func _161439Obj(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._161439Obj
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GameScene", withExtension: "sks")`
    static func gameSceneSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gameSceneSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Models", withExtension: "scnassets")`
    static func modelsScnassets(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.modelsScnassets
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "VideoTexturedFace", withExtension: "shader")`
    static func videoTexturedFaceShader(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.videoTexturedFaceShader
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "andrii", withExtension: "png")`
    static func andriiPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.andriiPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "andrii", withExtension: "scn")`
    static func andriiScn(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.andriiScn
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "model", withExtension: "mtl")`
    static func modelMtl(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.modelMtl
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 98 images.
  struct image {
    /// Image `andrii`.
    static let andrii = Rswift.ImageResource(bundle: R.hostingBundle, name: "andrii")
    /// Image `bath_background`.
    static let bath_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_background")
    /// Image `bath_cheek_left_blown`.
    static let bath_cheek_left_blown = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_cheek_left_blown")
    /// Image `bath_cheek_right_blown`.
    static let bath_cheek_right_blown = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_cheek_right_blown")
    /// Image `bath_cup_magenta_filled`.
    static let bath_cup_magenta_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_cup_magenta_filled")
    /// Image `bath_cup_magenta`.
    static let bath_cup_magenta = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_cup_magenta")
    /// Image `bath_dirt`.
    static let bath_dirt = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_dirt")
    /// Image `bath_eyes_damaged`.
    static let bath_eyes_damaged = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_eyes_damaged")
    /// Image `bath_eyes_default`.
    static let bath_eyes_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_eyes_default")
    /// Image `bath_fly_body`.
    static let bath_fly_body = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_fly_body")
    /// Image `bath_fly_nose`.
    static let bath_fly_nose = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_fly_nose")
    /// Image `bath_fly_wings_1`.
    static let bath_fly_wings_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_fly_wings_1")
    /// Image `bath_fly_wings_2`.
    static let bath_fly_wings_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_fly_wings_2")
    /// Image `bath_hair_left_fixed`.
    static let bath_hair_left_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_left_fixed")
    /// Image `bath_hair_left_initial`.
    static let bath_hair_left_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_left_initial")
    /// Image `bath_hair_piece_10`.
    static let bath_hair_piece_10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_10")
    /// Image `bath_hair_piece_11`.
    static let bath_hair_piece_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_11")
    /// Image `bath_hair_piece_1`.
    static let bath_hair_piece_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_1")
    /// Image `bath_hair_piece_2`.
    static let bath_hair_piece_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_2")
    /// Image `bath_hair_piece_3`.
    static let bath_hair_piece_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_3")
    /// Image `bath_hair_piece_4`.
    static let bath_hair_piece_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_4")
    /// Image `bath_hair_piece_5`.
    static let bath_hair_piece_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_5")
    /// Image `bath_hair_piece_6`.
    static let bath_hair_piece_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_6")
    /// Image `bath_hair_piece_7`.
    static let bath_hair_piece_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_7")
    /// Image `bath_hair_piece_8`.
    static let bath_hair_piece_8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_8")
    /// Image `bath_hair_piece_9`.
    static let bath_hair_piece_9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_9")
    /// Image `bath_hair_right_fixed_down`.
    static let bath_hair_right_fixed_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_right_fixed_down")
    /// Image `bath_hair_right_fixed_left`.
    static let bath_hair_right_fixed_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_right_fixed_left")
    /// Image `bath_hair_right_fixed_right`.
    static let bath_hair_right_fixed_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_right_fixed_right")
    /// Image `bath_hair_right_fixed_up`.
    static let bath_hair_right_fixed_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_right_fixed_up")
    /// Image `bath_hair_right_initial`.
    static let bath_hair_right_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_right_initial")
    /// Image `bath_head`.
    static let bath_head = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_head")
    /// Image `bath_jaw_bottom_fixed`.
    static let bath_jaw_bottom_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_jaw_bottom_fixed")
    /// Image `bath_jaw_bottom_initial`.
    static let bath_jaw_bottom_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_jaw_bottom_initial")
    /// Image `bath_jaw_top_fixed`.
    static let bath_jaw_top_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_jaw_top_fixed")
    /// Image `bath_jaw_top_initial`.
    static let bath_jaw_top_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_jaw_top_initial")
    /// Image `bath_lip_bottom`.
    static let bath_lip_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_lip_bottom")
    /// Image `bath_lip_top`.
    static let bath_lip_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_lip_top")
    /// Image `bath_mirror`.
    static let bath_mirror = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mirror")
    /// Image `bath_mouth_brushed_water_falling_1`.
    static let bath_mouth_brushed_water_falling_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_brushed_water_falling_1")
    /// Image `bath_mouth_brushed_water_falling_2`.
    static let bath_mouth_brushed_water_falling_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_brushed_water_falling_2")
    /// Image `bath_mouth_brushed_water_falling_3`.
    static let bath_mouth_brushed_water_falling_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_brushed_water_falling_3")
    /// Image `bath_mouth_brushed_water`.
    static let bath_mouth_brushed_water = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_brushed_water")
    /// Image `bath_mouth_brushed`.
    static let bath_mouth_brushed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_brushed")
    /// Image `bath_mouth_closed`.
    static let bath_mouth_closed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_closed")
    /// Image `bath_mouth_inside`.
    static let bath_mouth_inside = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_inside")
    /// Image `bath_nose`.
    static let bath_nose = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_nose")
    /// Image `bath_paste`.
    static let bath_paste = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_paste")
    /// Image `bath_razor_inuse`.
    static let bath_razor_inuse = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_razor_inuse")
    /// Image `bath_razor_top_part`.
    static let bath_razor_top_part = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_razor_top_part")
    /// Image `bath_razor`.
    static let bath_razor = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_razor")
    /// Image `bath_shirt_fixed`.
    static let bath_shirt_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_shirt_fixed")
    /// Image `bath_shirt_initial`.
    static let bath_shirt_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_shirt_initial")
    /// Image `bath_sink`.
    static let bath_sink = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_sink")
    /// Image `bath_tap_base`.
    static let bath_tap_base = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_base")
    /// Image `bath_tap_cold_valve`.
    static let bath_tap_cold_valve = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_cold_valve")
    /// Image `bath_tap_crane_cold`.
    static let bath_tap_crane_cold = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_crane_cold")
    /// Image `bath_tap_crane_default`.
    static let bath_tap_crane_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_crane_default")
    /// Image `bath_tap_hot_valve`.
    static let bath_tap_hot_valve = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_hot_valve")
    /// Image `bath_tap_steam1`.
    static let bath_tap_steam1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_steam1")
    /// Image `bath_tap_steam2`.
    static let bath_tap_steam2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_steam2")
    /// Image `bath_tap_steam3`.
    static let bath_tap_steam3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_steam3")
    /// Image `bath_tap_water1`.
    static let bath_tap_water1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_water1")
    /// Image `bath_tap_water2`.
    static let bath_tap_water2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_water2")
    /// Image `bath_tap_water3`.
    static let bath_tap_water3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_water3")
    /// Image `bath_toothbrush_pasted`.
    static let bath_toothbrush_pasted = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_toothbrush_pasted")
    /// Image `bath_toothbrush`.
    static let bath_toothbrush = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_toothbrush")
    /// Image `bath_towel_dry`.
    static let bath_towel_dry = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_towel_dry")
    /// Image `bath_towel_wet`.
    static let bath_towel_wet = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_towel_wet")
    /// Image `bathroom_background`.
    static let bathroom_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_background")
    /// Image `bathroom_bandage`.
    static let bathroom_bandage = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_bandage")
    /// Image `bathroom_comb`.
    static let bathroom_comb = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_comb")
    /// Image `bathroom_hair_fixed`.
    static let bathroom_hair_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_hair_fixed")
    /// Image `bathroom_hair_initial`.
    static let bathroom_hair_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_hair_initial")
    /// Image `bathroom_left_brow`.
    static let bathroom_left_brow = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_left_brow")
    /// Image `bathroom_left_eyeball`.
    static let bathroom_left_eyeball = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_left_eyeball")
    /// Image `bathroom_mouth_default`.
    static let bathroom_mouth_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_mouth_default")
    /// Image `bathroom_mustache`.
    static let bathroom_mustache = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_mustache")
    /// Image `bathroom_pimple1_bleeding`.
    static let bathroom_pimple1_bleeding = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_pimple1_bleeding")
    /// Image `bathroom_pimple1_fixed`.
    static let bathroom_pimple1_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_pimple1_fixed")
    /// Image `bathroom_pimple1_initial`.
    static let bathroom_pimple1_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_pimple1_initial")
    /// Image `bathroom_pimple2`.
    static let bathroom_pimple2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_pimple2")
    /// Image `bathroom_purple_cup`.
    static let bathroom_purple_cup = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_purple_cup")
    /// Image `bathroom_razor`.
    static let bathroom_razor = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_razor")
    /// Image `bathroom_right_brow`.
    static let bathroom_right_brow = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_right_brow")
    /// Image `bathroom_right_eyeball`.
    static let bathroom_right_eyeball = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_right_eyeball")
    /// Image `bathroom_shirt_fixed`.
    static let bathroom_shirt_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_shirt_fixed")
    /// Image `bathroom_shirt_initial`.
    static let bathroom_shirt_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_shirt_initial")
    /// Image `bathroom_toothbrush`.
    static let bathroom_toothbrush = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_toothbrush")
    /// Image `bathroom_water`.
    static let bathroom_water = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_water")
    /// Image `blendShapes`.
    static let blendShapes = Rswift.ImageResource(bundle: R.hostingBundle, name: "blendShapes")
    /// Image `geometry`.
    static let geometry = Rswift.ImageResource(bundle: R.hostingBundle, name: "geometry")
    /// Image `restartPressed`.
    static let restartPressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "restartPressed")
    /// Image `restart`.
    static let restart = Rswift.ImageResource(bundle: R.hostingBundle, name: "restart")
    /// Image `texture`.
    static let texture = Rswift.ImageResource(bundle: R.hostingBundle, name: "texture")
    /// Image `transforms`.
    static let transforms = Rswift.ImageResource(bundle: R.hostingBundle, name: "transforms")
    /// Image `videoTexture`.
    static let videoTexture = Rswift.ImageResource(bundle: R.hostingBundle, name: "videoTexture")
    /// Image `wireframeTexture`.
    static let wireframeTexture = Rswift.ImageResource(bundle: R.hostingBundle, name: "wireframeTexture")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "andrii", bundle: ..., traitCollection: ...)`
    static func andrii(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.andrii, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_background", bundle: ..., traitCollection: ...)`
    static func bath_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_cheek_left_blown", bundle: ..., traitCollection: ...)`
    static func bath_cheek_left_blown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_cheek_left_blown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_cheek_right_blown", bundle: ..., traitCollection: ...)`
    static func bath_cheek_right_blown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_cheek_right_blown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_cup_magenta", bundle: ..., traitCollection: ...)`
    static func bath_cup_magenta(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_cup_magenta, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_cup_magenta_filled", bundle: ..., traitCollection: ...)`
    static func bath_cup_magenta_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_cup_magenta_filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_dirt", bundle: ..., traitCollection: ...)`
    static func bath_dirt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_dirt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_eyes_damaged", bundle: ..., traitCollection: ...)`
    static func bath_eyes_damaged(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_eyes_damaged, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_eyes_default", bundle: ..., traitCollection: ...)`
    static func bath_eyes_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_eyes_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_fly_body", bundle: ..., traitCollection: ...)`
    static func bath_fly_body(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_fly_body, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_fly_nose", bundle: ..., traitCollection: ...)`
    static func bath_fly_nose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_fly_nose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_fly_wings_1", bundle: ..., traitCollection: ...)`
    static func bath_fly_wings_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_fly_wings_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_fly_wings_2", bundle: ..., traitCollection: ...)`
    static func bath_fly_wings_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_fly_wings_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_left_fixed", bundle: ..., traitCollection: ...)`
    static func bath_hair_left_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_left_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_left_initial", bundle: ..., traitCollection: ...)`
    static func bath_hair_left_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_left_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_1", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_10", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_11", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_2", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_3", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_4", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_5", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_6", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_7", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_8", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_9", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_right_fixed_down", bundle: ..., traitCollection: ...)`
    static func bath_hair_right_fixed_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_right_fixed_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_right_fixed_left", bundle: ..., traitCollection: ...)`
    static func bath_hair_right_fixed_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_right_fixed_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_right_fixed_right", bundle: ..., traitCollection: ...)`
    static func bath_hair_right_fixed_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_right_fixed_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_right_fixed_up", bundle: ..., traitCollection: ...)`
    static func bath_hair_right_fixed_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_right_fixed_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_right_initial", bundle: ..., traitCollection: ...)`
    static func bath_hair_right_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_right_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_head", bundle: ..., traitCollection: ...)`
    static func bath_head(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_head, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_jaw_bottom_fixed", bundle: ..., traitCollection: ...)`
    static func bath_jaw_bottom_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_jaw_bottom_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_jaw_bottom_initial", bundle: ..., traitCollection: ...)`
    static func bath_jaw_bottom_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_jaw_bottom_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_jaw_top_fixed", bundle: ..., traitCollection: ...)`
    static func bath_jaw_top_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_jaw_top_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_jaw_top_initial", bundle: ..., traitCollection: ...)`
    static func bath_jaw_top_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_jaw_top_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_lip_bottom", bundle: ..., traitCollection: ...)`
    static func bath_lip_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_lip_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_lip_top", bundle: ..., traitCollection: ...)`
    static func bath_lip_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_lip_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mirror", bundle: ..., traitCollection: ...)`
    static func bath_mirror(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mirror, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_brushed", bundle: ..., traitCollection: ...)`
    static func bath_mouth_brushed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_brushed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_brushed_water", bundle: ..., traitCollection: ...)`
    static func bath_mouth_brushed_water(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_brushed_water, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_brushed_water_falling_1", bundle: ..., traitCollection: ...)`
    static func bath_mouth_brushed_water_falling_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_brushed_water_falling_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_brushed_water_falling_2", bundle: ..., traitCollection: ...)`
    static func bath_mouth_brushed_water_falling_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_brushed_water_falling_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_brushed_water_falling_3", bundle: ..., traitCollection: ...)`
    static func bath_mouth_brushed_water_falling_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_brushed_water_falling_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_closed", bundle: ..., traitCollection: ...)`
    static func bath_mouth_closed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_closed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_inside", bundle: ..., traitCollection: ...)`
    static func bath_mouth_inside(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_inside, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_nose", bundle: ..., traitCollection: ...)`
    static func bath_nose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_nose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_paste", bundle: ..., traitCollection: ...)`
    static func bath_paste(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_paste, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_razor", bundle: ..., traitCollection: ...)`
    static func bath_razor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_razor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_razor_inuse", bundle: ..., traitCollection: ...)`
    static func bath_razor_inuse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_razor_inuse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_razor_top_part", bundle: ..., traitCollection: ...)`
    static func bath_razor_top_part(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_razor_top_part, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_shirt_fixed", bundle: ..., traitCollection: ...)`
    static func bath_shirt_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_shirt_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_shirt_initial", bundle: ..., traitCollection: ...)`
    static func bath_shirt_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_shirt_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_sink", bundle: ..., traitCollection: ...)`
    static func bath_sink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_sink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_base", bundle: ..., traitCollection: ...)`
    static func bath_tap_base(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_base, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_cold_valve", bundle: ..., traitCollection: ...)`
    static func bath_tap_cold_valve(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_cold_valve, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_crane_cold", bundle: ..., traitCollection: ...)`
    static func bath_tap_crane_cold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_crane_cold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_crane_default", bundle: ..., traitCollection: ...)`
    static func bath_tap_crane_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_crane_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_hot_valve", bundle: ..., traitCollection: ...)`
    static func bath_tap_hot_valve(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_hot_valve, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_steam1", bundle: ..., traitCollection: ...)`
    static func bath_tap_steam1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_steam1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_steam2", bundle: ..., traitCollection: ...)`
    static func bath_tap_steam2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_steam2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_steam3", bundle: ..., traitCollection: ...)`
    static func bath_tap_steam3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_steam3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_water1", bundle: ..., traitCollection: ...)`
    static func bath_tap_water1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_water1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_water2", bundle: ..., traitCollection: ...)`
    static func bath_tap_water2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_water2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_water3", bundle: ..., traitCollection: ...)`
    static func bath_tap_water3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_water3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_toothbrush", bundle: ..., traitCollection: ...)`
    static func bath_toothbrush(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_toothbrush, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_toothbrush_pasted", bundle: ..., traitCollection: ...)`
    static func bath_toothbrush_pasted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_toothbrush_pasted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_towel_dry", bundle: ..., traitCollection: ...)`
    static func bath_towel_dry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_towel_dry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_towel_wet", bundle: ..., traitCollection: ...)`
    static func bath_towel_wet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_towel_wet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_background", bundle: ..., traitCollection: ...)`
    static func bathroom_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_bandage", bundle: ..., traitCollection: ...)`
    static func bathroom_bandage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_bandage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_comb", bundle: ..., traitCollection: ...)`
    static func bathroom_comb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_comb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_hair_fixed", bundle: ..., traitCollection: ...)`
    static func bathroom_hair_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_hair_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_hair_initial", bundle: ..., traitCollection: ...)`
    static func bathroom_hair_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_hair_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_left_brow", bundle: ..., traitCollection: ...)`
    static func bathroom_left_brow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_left_brow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_left_eyeball", bundle: ..., traitCollection: ...)`
    static func bathroom_left_eyeball(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_left_eyeball, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_mouth_default", bundle: ..., traitCollection: ...)`
    static func bathroom_mouth_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_mouth_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_mustache", bundle: ..., traitCollection: ...)`
    static func bathroom_mustache(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_mustache, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_pimple1_bleeding", bundle: ..., traitCollection: ...)`
    static func bathroom_pimple1_bleeding(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_pimple1_bleeding, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_pimple1_fixed", bundle: ..., traitCollection: ...)`
    static func bathroom_pimple1_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_pimple1_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_pimple1_initial", bundle: ..., traitCollection: ...)`
    static func bathroom_pimple1_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_pimple1_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_pimple2", bundle: ..., traitCollection: ...)`
    static func bathroom_pimple2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_pimple2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_purple_cup", bundle: ..., traitCollection: ...)`
    static func bathroom_purple_cup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_purple_cup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_razor", bundle: ..., traitCollection: ...)`
    static func bathroom_razor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_razor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_right_brow", bundle: ..., traitCollection: ...)`
    static func bathroom_right_brow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_right_brow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_right_eyeball", bundle: ..., traitCollection: ...)`
    static func bathroom_right_eyeball(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_right_eyeball, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_shirt_fixed", bundle: ..., traitCollection: ...)`
    static func bathroom_shirt_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_shirt_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_shirt_initial", bundle: ..., traitCollection: ...)`
    static func bathroom_shirt_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_shirt_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_toothbrush", bundle: ..., traitCollection: ...)`
    static func bathroom_toothbrush(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_toothbrush, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_water", bundle: ..., traitCollection: ...)`
    static func bathroom_water(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_water, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blendShapes", bundle: ..., traitCollection: ...)`
    static func blendShapes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blendShapes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "geometry", bundle: ..., traitCollection: ...)`
    static func geometry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.geometry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "restart", bundle: ..., traitCollection: ...)`
    static func restart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "restartPressed", bundle: ..., traitCollection: ...)`
    static func restartPressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restartPressed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "texture", bundle: ..., traitCollection: ...)`
    static func texture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.texture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transforms", bundle: ..., traitCollection: ...)`
    static func transforms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transforms, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "videoTexture", bundle: ..., traitCollection: ...)`
    static func videoTexture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoTexture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wireframeTexture", bundle: ..., traitCollection: ...)`
    static func wireframeTexture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wireframeTexture, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.bath` struct is generated, and contains static references to 55 localization keys.
    struct bath {
      /// Value: bandage
      static let bandage = Rswift.StringResource(key: "bandage", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: cold_valve
      static let cold_valve = Rswift.StringResource(key: "cold_valve", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: comb
      static let comb = Rswift.StringResource(key: "comb", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: crane
      static let crane = Rswift.StringResource(key: "crane", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: eyes
      static let eyes = Rswift.StringResource(key: "eyes", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: fly
      static let fly = Rswift.StringResource(key: "fly", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: fly_body
      static let fly_body = Rswift.StringResource(key: "fly_body", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: fly_nose
      static let fly_nose = Rswift.StringResource(key: "fly_nose", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: fly_wings
      static let fly_wings = Rswift.StringResource(key: "fly_wings", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_left_fixed
      static let hair_left_fixed = Rswift.StringResource(key: "hair_left_fixed", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_left_initial
      static let hair_left_initial = Rswift.StringResource(key: "hair_left_initial", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_piece
      static let hair_piece = Rswift.StringResource(key: "hair_piece", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_right_fixed_down
      static let hair_right_fixed_down = Rswift.StringResource(key: "hair_right_fixed_down", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_right_fixed_left
      static let hair_right_fixed_left = Rswift.StringResource(key: "hair_right_fixed_left", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_right_fixed_right
      static let hair_right_fixed_right = Rswift.StringResource(key: "hair_right_fixed_right", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_right_fixed_up
      static let hair_right_fixed_up = Rswift.StringResource(key: "hair_right_fixed_up", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_right_initial
      static let hair_right_initial = Rswift.StringResource(key: "hair_right_initial", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hot_valve
      static let hot_valve = Rswift.StringResource(key: "hot_valve", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: jaw_bottom
      static let jaw_bottom = Rswift.StringResource(key: "jaw_bottom", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: jaw_top
      static let jaw_top = Rswift.StringResource(key: "jaw_top", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_brow
      static let left_brow = Rswift.StringResource(key: "left_brow", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_cheek
      static let left_cheek = Rswift.StringResource(key: "left_cheek", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_eyeball
      static let left_eyeball = Rswift.StringResource(key: "left_eyeball", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: lip_bottom
      static let lip_bottom = Rswift.StringResource(key: "lip_bottom", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: lip_top
      static let lip_top = Rswift.StringResource(key: "lip_top", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: magenta_cup
      static let magenta_cup = Rswift.StringResource(key: "magenta_cup", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mouth_brushed
      static let mouth_brushed = Rswift.StringResource(key: "mouth_brushed", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mouth_brushed_water
      static let mouth_brushed_water = Rswift.StringResource(key: "mouth_brushed_water", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mouth_default
      static let mouth_default = Rswift.StringResource(key: "mouth_default", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mouth_inside
      static let mouth_inside = Rswift.StringResource(key: "mouth_inside", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple1_bleeding
      static let pimple1_bleedning = Rswift.StringResource(key: "pimple1_bleedning", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple1_fixed
      static let pimple1_fixed = Rswift.StringResource(key: "pimple1_fixed", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple1_initial
      static let pimple1_initial = Rswift.StringResource(key: "pimple1_initial", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple1_pinch_zone
      static let pimple1_pinch_zone = Rswift.StringResource(key: "pimple1_pinch_zone", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple2
      static let pimple2 = Rswift.StringResource(key: "pimple2", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple2_pinch_zone
      static let pimple2_pinch_zone = Rswift.StringResource(key: "pimple2_pinch_zone", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple3
      static let pimple3 = Rswift.StringResource(key: "pimple3", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: purple_cup
      static let purple_cup = Rswift.StringResource(key: "purple_cup", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: razor
      static let razor = Rswift.StringResource(key: "razor", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: razor_top
      static let razor_top = Rswift.StringResource(key: "razor_top", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_brow
      static let right_brow = Rswift.StringResource(key: "right_brow", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_cheek
      static let right_cheek = Rswift.StringResource(key: "right_cheek", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_eyeball
      static let right_eyeball = Rswift.StringResource(key: "right_eyeball", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: steam1
      static let steam1 = Rswift.StringResource(key: "steam1", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: steam2
      static let steam2 = Rswift.StringResource(key: "steam2", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: steam3
      static let steam3 = Rswift.StringResource(key: "steam3", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: toilet_water
      static let toilet_water = Rswift.StringResource(key: "toilet_water", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: toothbrush
      static let toothbrush = Rswift.StringResource(key: "toothbrush", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: toothbrush_top
      static let toothbrush_top = Rswift.StringResource(key: "toothbrush_top", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: towel_dry
      static let towel_dry = Rswift.StringResource(key: "towel_dry", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: towel_wet
      static let towel_wet = Rswift.StringResource(key: "towel_wet", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: water
      static let water = Rswift.StringResource(key: "water", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: water_falling1
      static let water_falling1 = Rswift.StringResource(key: "water_falling1", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: water_falling2
      static let water_falling2 = Rswift.StringResource(key: "water_falling2", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: water_falling3
      static let water_falling3 = Rswift.StringResource(key: "water_falling3", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: bandage
      static func bandage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bandage", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "bandage"
        }

        return NSLocalizedString("bandage", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: cold_valve
      static func cold_valve(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cold_valve", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "cold_valve"
        }

        return NSLocalizedString("cold_valve", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: comb
      static func comb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("comb", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "comb"
        }

        return NSLocalizedString("comb", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: crane
      static func crane(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("crane", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "crane"
        }

        return NSLocalizedString("crane", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: eyes
      static func eyes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eyes", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "eyes"
        }

        return NSLocalizedString("eyes", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: fly
      static func fly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fly", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "fly"
        }

        return NSLocalizedString("fly", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: fly_body
      static func fly_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fly_body", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "fly_body"
        }

        return NSLocalizedString("fly_body", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: fly_nose
      static func fly_nose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fly_nose", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "fly_nose"
        }

        return NSLocalizedString("fly_nose", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: fly_wings
      static func fly_wings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fly_wings", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "fly_wings"
        }

        return NSLocalizedString("fly_wings", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_left_fixed
      static func hair_left_fixed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_left_fixed", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_left_fixed"
        }

        return NSLocalizedString("hair_left_fixed", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_left_initial
      static func hair_left_initial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_left_initial", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_left_initial"
        }

        return NSLocalizedString("hair_left_initial", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_piece
      static func hair_piece(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_piece", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_piece"
        }

        return NSLocalizedString("hair_piece", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_right_fixed_down
      static func hair_right_fixed_down(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_right_fixed_down", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_right_fixed_down"
        }

        return NSLocalizedString("hair_right_fixed_down", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_right_fixed_left
      static func hair_right_fixed_left(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_right_fixed_left", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_right_fixed_left"
        }

        return NSLocalizedString("hair_right_fixed_left", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_right_fixed_right
      static func hair_right_fixed_right(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_right_fixed_right", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_right_fixed_right"
        }

        return NSLocalizedString("hair_right_fixed_right", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_right_fixed_up
      static func hair_right_fixed_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_right_fixed_up", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_right_fixed_up"
        }

        return NSLocalizedString("hair_right_fixed_up", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_right_initial
      static func hair_right_initial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_right_initial", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_right_initial"
        }

        return NSLocalizedString("hair_right_initial", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hot_valve
      static func hot_valve(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hot_valve", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hot_valve"
        }

        return NSLocalizedString("hot_valve", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: jaw_bottom
      static func jaw_bottom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jaw_bottom", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "jaw_bottom"
        }

        return NSLocalizedString("jaw_bottom", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: jaw_top
      static func jaw_top(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jaw_top", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "jaw_top"
        }

        return NSLocalizedString("jaw_top", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: left_brow
      static func left_brow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left_brow", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "left_brow"
        }

        return NSLocalizedString("left_brow", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: left_cheek
      static func left_cheek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left_cheek", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "left_cheek"
        }

        return NSLocalizedString("left_cheek", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: left_eyeball
      static func left_eyeball(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left_eyeball", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "left_eyeball"
        }

        return NSLocalizedString("left_eyeball", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: lip_bottom
      static func lip_bottom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lip_bottom", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "lip_bottom"
        }

        return NSLocalizedString("lip_bottom", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: lip_top
      static func lip_top(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lip_top", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "lip_top"
        }

        return NSLocalizedString("lip_top", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: magenta_cup
      static func magenta_cup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("magenta_cup", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "magenta_cup"
        }

        return NSLocalizedString("magenta_cup", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mouth_brushed
      static func mouth_brushed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mouth_brushed", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mouth_brushed"
        }

        return NSLocalizedString("mouth_brushed", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mouth_brushed_water
      static func mouth_brushed_water(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mouth_brushed_water", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mouth_brushed_water"
        }

        return NSLocalizedString("mouth_brushed_water", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mouth_default
      static func mouth_default(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mouth_default", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mouth_default"
        }

        return NSLocalizedString("mouth_default", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mouth_inside
      static func mouth_inside(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mouth_inside", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mouth_inside"
        }

        return NSLocalizedString("mouth_inside", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple1_bleeding
      static func pimple1_bleedning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple1_bleedning", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple1_bleedning"
        }

        return NSLocalizedString("pimple1_bleedning", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple1_fixed
      static func pimple1_fixed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple1_fixed", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple1_fixed"
        }

        return NSLocalizedString("pimple1_fixed", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple1_initial
      static func pimple1_initial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple1_initial", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple1_initial"
        }

        return NSLocalizedString("pimple1_initial", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple1_pinch_zone
      static func pimple1_pinch_zone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple1_pinch_zone", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple1_pinch_zone"
        }

        return NSLocalizedString("pimple1_pinch_zone", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple2
      static func pimple2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple2", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple2"
        }

        return NSLocalizedString("pimple2", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple2_pinch_zone
      static func pimple2_pinch_zone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple2_pinch_zone", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple2_pinch_zone"
        }

        return NSLocalizedString("pimple2_pinch_zone", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple3
      static func pimple3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple3", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple3"
        }

        return NSLocalizedString("pimple3", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: purple_cup
      static func purple_cup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purple_cup", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "purple_cup"
        }

        return NSLocalizedString("purple_cup", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: razor
      static func razor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("razor", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "razor"
        }

        return NSLocalizedString("razor", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: razor_top
      static func razor_top(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("razor_top", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "razor_top"
        }

        return NSLocalizedString("razor_top", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: right_brow
      static func right_brow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right_brow", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "right_brow"
        }

        return NSLocalizedString("right_brow", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: right_cheek
      static func right_cheek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right_cheek", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "right_cheek"
        }

        return NSLocalizedString("right_cheek", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: right_eyeball
      static func right_eyeball(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right_eyeball", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "right_eyeball"
        }

        return NSLocalizedString("right_eyeball", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: steam1
      static func steam1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("steam1", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "steam1"
        }

        return NSLocalizedString("steam1", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: steam2
      static func steam2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("steam2", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "steam2"
        }

        return NSLocalizedString("steam2", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: steam3
      static func steam3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("steam3", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "steam3"
        }

        return NSLocalizedString("steam3", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: toilet_water
      static func toilet_water(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toilet_water", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "toilet_water"
        }

        return NSLocalizedString("toilet_water", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: toothbrush
      static func toothbrush(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toothbrush", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "toothbrush"
        }

        return NSLocalizedString("toothbrush", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: toothbrush_top
      static func toothbrush_top(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toothbrush_top", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "toothbrush_top"
        }

        return NSLocalizedString("toothbrush_top", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: towel_dry
      static func towel_dry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("towel_dry", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "towel_dry"
        }

        return NSLocalizedString("towel_dry", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: towel_wet
      static func towel_wet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("towel_wet", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "towel_wet"
        }

        return NSLocalizedString("towel_wet", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: water
      static func water(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "water"
        }

        return NSLocalizedString("water", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: water_falling1
      static func water_falling1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water_falling1", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "water_falling1"
        }

        return NSLocalizedString("water_falling1", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: water_falling2
      static func water_falling2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water_falling2", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "water_falling2"
        }

        return NSLocalizedString("water_falling2", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: water_falling3
      static func water_falling3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water_falling3", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "water_falling3"
        }

        return NSLocalizedString("water_falling3", tableName: "Bath", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"
      let unsupportedDeviceMessage = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "unsupportedDeviceMessage")

      func unsupportedDeviceMessage(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: unsupportedDeviceMessage)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "blendShapes", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blendShapes' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "geometry", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'geometry' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "texture", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'texture' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "transforms", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'transforms' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videoTexture", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'videoTexture' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().unsupportedDeviceMessage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'unsupportedDeviceMessage' could not be loaded from storyboard 'Main' as 'UIKit.UIViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
