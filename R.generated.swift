//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `ViewController`, and contains static references to 1 segues.
    struct viewController {
      /// Segue identifier `toSketch`.
      static let toSketch: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, SketchViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toSketch")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toSketch`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toSketch(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, SketchViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.toSketch, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 37 files.
  struct file {
    /// Resource file `20200306_161439.obj`.
    static let _161439Obj = Rswift.FileResource(bundle: R.hostingBundle, name: "20200306_161439", pathExtension: "obj")
    /// Resource file `GameScene.sks`.
    static let gameSceneSks = Rswift.FileResource(bundle: R.hostingBundle, name: "GameScene", pathExtension: "sks")
    /// Resource file `Models.scnassets`.
    static let modelsScnassets = Rswift.FileResource(bundle: R.hostingBundle, name: "Models", pathExtension: "scnassets")
    /// Resource file `VideoTexturedFace.shader`.
    static let videoTexturedFaceShader = Rswift.FileResource(bundle: R.hostingBundle, name: "VideoTexturedFace", pathExtension: "shader")
    /// Resource file `Warehouse.sks`.
    static let warehouseSks = Rswift.FileResource(bundle: R.hostingBundle, name: "Warehouse", pathExtension: "sks")
    /// Resource file `andrii.png`.
    static let andriiPng = Rswift.FileResource(bundle: R.hostingBundle, name: "andrii", pathExtension: "png")
    /// Resource file `andrii.scn`.
    static let andriiScn = Rswift.FileResource(bundle: R.hostingBundle, name: "andrii", pathExtension: "scn")
    /// Resource file `angry_spider.mp3`.
    static let angry_spiderMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "angry_spider", pathExtension: "mp3")
    /// Resource file `bad_spray.mp3`.
    static let bad_sprayMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "bad_spray", pathExtension: "mp3")
    /// Resource file `comb1.mp3`.
    static let comb1Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "comb1", pathExtension: "mp3")
    /// Resource file `comb2.mp3`.
    static let comb2Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "comb2", pathExtension: "mp3")
    /// Resource file `ding.mp3`.
    static let dingMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "ding", pathExtension: "mp3")
    /// Resource file `filling_glass.mp3`.
    static let filling_glassMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "filling_glass", pathExtension: "mp3")
    /// Resource file `fixing_spray.mp3`.
    static let fixing_sprayMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "fixing_spray", pathExtension: "mp3")
    /// Resource file `fly.mp3`.
    static let flyMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "fly", pathExtension: "mp3")
    /// Resource file `item_land.mp3`.
    static let item_landMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "item_land", pathExtension: "mp3")
    /// Resource file `mirror1.mp3`.
    static let mirror1Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "mirror1", pathExtension: "mp3")
    /// Resource file `mirror2.mp3`.
    static let mirror2Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "mirror2", pathExtension: "mp3")
    /// Resource file `mirror3.mp3`.
    static let mirror3Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "mirror3", pathExtension: "mp3")
    /// Resource file `mirror4.mp3`.
    static let mirror4Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "mirror4", pathExtension: "mp3")
    /// Resource file `mirror5.mp3`.
    static let mirror5Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "mirror5", pathExtension: "mp3")
    /// Resource file `mirror6.mp3`.
    static let mirror6Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "mirror6", pathExtension: "mp3")
    /// Resource file `model.mtl`.
    static let modelMtl = Rswift.FileResource(bundle: R.hostingBundle, name: "model", pathExtension: "mtl")
    /// Resource file `pimple1.mp3`.
    static let pimple1Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "pimple1", pathExtension: "mp3")
    /// Resource file `pimple2.mp3`.
    static let pimple2Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "pimple2", pathExtension: "mp3")
    /// Resource file `pimple3.mp3`.
    static let pimple3Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "pimple3", pathExtension: "mp3")
    /// Resource file `rinsing1.m4a`.
    static let rinsing1M4a = Rswift.FileResource(bundle: R.hostingBundle, name: "rinsing1", pathExtension: "m4a")
    /// Resource file `rinsing1.mp3`.
    static let rinsing1Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "rinsing1", pathExtension: "mp3")
    /// Resource file `rinsing2.m4a`.
    static let rinsing2M4a = Rswift.FileResource(bundle: R.hostingBundle, name: "rinsing2", pathExtension: "m4a")
    /// Resource file `rinsing2.mp3`.
    static let rinsing2Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "rinsing2", pathExtension: "mp3")
    /// Resource file `shave2.m4a`.
    static let shave2M4a = Rswift.FileResource(bundle: R.hostingBundle, name: "shave2", pathExtension: "m4a")
    /// Resource file `shave5.m4a`.
    static let shave5M4a = Rswift.FileResource(bundle: R.hostingBundle, name: "shave5", pathExtension: "m4a")
    /// Resource file `shave6.m4a`.
    static let shave6M4a = Rswift.FileResource(bundle: R.hostingBundle, name: "shave6", pathExtension: "m4a")
    /// Resource file `spit.mp3`.
    static let spitMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "spit", pathExtension: "mp3")
    /// Resource file `teeth1.mp3`.
    static let teeth1Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "teeth1", pathExtension: "mp3")
    /// Resource file `teeth2.mp3`.
    static let teeth2Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "teeth2", pathExtension: "mp3")
    /// Resource file `teeth3.mp3`.
    static let teeth3Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "teeth3", pathExtension: "mp3")

    /// `bundle.url(forResource: "20200306_161439", withExtension: "obj")`
    static func _161439Obj(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._161439Obj
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GameScene", withExtension: "sks")`
    static func gameSceneSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gameSceneSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Models", withExtension: "scnassets")`
    static func modelsScnassets(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.modelsScnassets
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "VideoTexturedFace", withExtension: "shader")`
    static func videoTexturedFaceShader(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.videoTexturedFaceShader
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Warehouse", withExtension: "sks")`
    static func warehouseSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.warehouseSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "andrii", withExtension: "png")`
    static func andriiPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.andriiPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "andrii", withExtension: "scn")`
    static func andriiScn(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.andriiScn
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "angry_spider", withExtension: "mp3")`
    static func angry_spiderMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.angry_spiderMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bad_spray", withExtension: "mp3")`
    static func bad_sprayMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bad_sprayMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "comb1", withExtension: "mp3")`
    static func comb1Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comb1Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "comb2", withExtension: "mp3")`
    static func comb2Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comb2Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ding", withExtension: "mp3")`
    static func dingMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dingMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "filling_glass", withExtension: "mp3")`
    static func filling_glassMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.filling_glassMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fixing_spray", withExtension: "mp3")`
    static func fixing_sprayMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fixing_sprayMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fly", withExtension: "mp3")`
    static func flyMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.flyMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "item_land", withExtension: "mp3")`
    static func item_landMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.item_landMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mirror1", withExtension: "mp3")`
    static func mirror1Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mirror1Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mirror2", withExtension: "mp3")`
    static func mirror2Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mirror2Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mirror3", withExtension: "mp3")`
    static func mirror3Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mirror3Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mirror4", withExtension: "mp3")`
    static func mirror4Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mirror4Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mirror5", withExtension: "mp3")`
    static func mirror5Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mirror5Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mirror6", withExtension: "mp3")`
    static func mirror6Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mirror6Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "model", withExtension: "mtl")`
    static func modelMtl(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.modelMtl
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pimple1", withExtension: "mp3")`
    static func pimple1Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pimple1Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pimple2", withExtension: "mp3")`
    static func pimple2Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pimple2Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pimple3", withExtension: "mp3")`
    static func pimple3Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pimple3Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "rinsing1", withExtension: "m4a")`
    static func rinsing1M4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rinsing1M4a
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "rinsing1", withExtension: "mp3")`
    static func rinsing1Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rinsing1Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "rinsing2", withExtension: "m4a")`
    static func rinsing2M4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rinsing2M4a
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "rinsing2", withExtension: "mp3")`
    static func rinsing2Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rinsing2Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shave2", withExtension: "m4a")`
    static func shave2M4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shave2M4a
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shave5", withExtension: "m4a")`
    static func shave5M4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shave5M4a
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shave6", withExtension: "m4a")`
    static func shave6M4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shave6M4a
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "spit", withExtension: "mp3")`
    static func spitMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.spitMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "teeth1", withExtension: "mp3")`
    static func teeth1Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.teeth1Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "teeth2", withExtension: "mp3")`
    static func teeth2Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.teeth2Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "teeth3", withExtension: "mp3")`
    static func teeth3Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.teeth3Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 152 images.
  struct image {
    /// Image `andrii`.
    static let andrii = Rswift.ImageResource(bundle: R.hostingBundle, name: "andrii")
    /// Image `bath_background`.
    static let bath_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_background")
    /// Image `bath_bad_spray1`.
    static let bath_bad_spray1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_bad_spray1")
    /// Image `bath_bad_spray2`.
    static let bath_bad_spray2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_bad_spray2")
    /// Image `bath_bad_spray3`.
    static let bath_bad_spray3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_bad_spray3")
    /// Image `bath_blur`.
    static let bath_blur = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_blur")
    /// Image `bath_cheek_left_blown`.
    static let bath_cheek_left_blown = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_cheek_left_blown")
    /// Image `bath_cheek_right_blown`.
    static let bath_cheek_right_blown = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_cheek_right_blown")
    /// Image `bath_coldeffect_head1`.
    static let bath_coldeffect_head1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_coldeffect_head1")
    /// Image `bath_coldeffect_head2`.
    static let bath_coldeffect_head2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_coldeffect_head2")
    /// Image `bath_coldeffect_nose`.
    static let bath_coldeffect_nose = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_coldeffect_nose")
    /// Image `bath_cup_magenta_filled`.
    static let bath_cup_magenta_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_cup_magenta_filled")
    /// Image `bath_cup_magenta`.
    static let bath_cup_magenta = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_cup_magenta")
    /// Image `bath_deodorant_spray_bad`.
    static let bath_deodorant_spray_bad = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_deodorant_spray_bad")
    /// Image `bath_deodorant_spray_good`.
    static let bath_deodorant_spray_good = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_deodorant_spray_good")
    /// Image `bath_deodorant`.
    static let bath_deodorant = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_deodorant")
    /// Image `bath_dirt`.
    static let bath_dirt = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_dirt")
    /// Image `bath_earpiece_left`.
    static let bath_earpiece_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_earpiece_left")
    /// Image `bath_earpiece_right`.
    static let bath_earpiece_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_earpiece_right")
    /// Image `bath_eyes_damaged`.
    static let bath_eyes_damaged = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_eyes_damaged")
    /// Image `bath_eyes_default`.
    static let bath_eyes_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_eyes_default")
    /// Image `bath_fly_body`.
    static let bath_fly_body = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_fly_body")
    /// Image `bath_fly_nose`.
    static let bath_fly_nose = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_fly_nose")
    /// Image `bath_fly_wings_1`.
    static let bath_fly_wings_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_fly_wings_1")
    /// Image `bath_fly_wings_2`.
    static let bath_fly_wings_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_fly_wings_2")
    /// Image `bath_good_spray1`.
    static let bath_good_spray1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_good_spray1")
    /// Image `bath_good_spray2`.
    static let bath_good_spray2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_good_spray2")
    /// Image `bath_good_spray3`.
    static let bath_good_spray3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_good_spray3")
    /// Image `bath_hair_left_fixed`.
    static let bath_hair_left_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_left_fixed")
    /// Image `bath_hair_left_initial`.
    static let bath_hair_left_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_left_initial")
    /// Image `bath_hair_piece_10`.
    static let bath_hair_piece_10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_10")
    /// Image `bath_hair_piece_11`.
    static let bath_hair_piece_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_11")
    /// Image `bath_hair_piece_12`.
    static let bath_hair_piece_12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_12")
    /// Image `bath_hair_piece_13`.
    static let bath_hair_piece_13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_13")
    /// Image `bath_hair_piece_14`.
    static let bath_hair_piece_14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_14")
    /// Image `bath_hair_piece_15`.
    static let bath_hair_piece_15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_15")
    /// Image `bath_hair_piece_16`.
    static let bath_hair_piece_16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_16")
    /// Image `bath_hair_piece_17`.
    static let bath_hair_piece_17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_17")
    /// Image `bath_hair_piece_18`.
    static let bath_hair_piece_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_18")
    /// Image `bath_hair_piece_19`.
    static let bath_hair_piece_19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_19")
    /// Image `bath_hair_piece_1`.
    static let bath_hair_piece_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_1")
    /// Image `bath_hair_piece_20`.
    static let bath_hair_piece_20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_20")
    /// Image `bath_hair_piece_21`.
    static let bath_hair_piece_21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_21")
    /// Image `bath_hair_piece_2`.
    static let bath_hair_piece_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_2")
    /// Image `bath_hair_piece_3`.
    static let bath_hair_piece_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_3")
    /// Image `bath_hair_piece_4`.
    static let bath_hair_piece_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_4")
    /// Image `bath_hair_piece_5`.
    static let bath_hair_piece_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_5")
    /// Image `bath_hair_piece_6`.
    static let bath_hair_piece_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_6")
    /// Image `bath_hair_piece_7`.
    static let bath_hair_piece_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_7")
    /// Image `bath_hair_piece_8`.
    static let bath_hair_piece_8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_8")
    /// Image `bath_hair_piece_9`.
    static let bath_hair_piece_9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_piece_9")
    /// Image `bath_hair_right_fixed_down`.
    static let bath_hair_right_fixed_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_right_fixed_down")
    /// Image `bath_hair_right_fixed_left`.
    static let bath_hair_right_fixed_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_right_fixed_left")
    /// Image `bath_hair_right_fixed_right`.
    static let bath_hair_right_fixed_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_right_fixed_right")
    /// Image `bath_hair_right_fixed_up`.
    static let bath_hair_right_fixed_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_right_fixed_up")
    /// Image `bath_hair_right_initial`.
    static let bath_hair_right_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_hair_right_initial")
    /// Image `bath_head`.
    static let bath_head = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_head")
    /// Image `bath_heart`.
    static let bath_heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_heart")
    /// Image `bath_jaw_bottom_fixed`.
    static let bath_jaw_bottom_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_jaw_bottom_fixed")
    /// Image `bath_jaw_bottom_initial`.
    static let bath_jaw_bottom_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_jaw_bottom_initial")
    /// Image `bath_jaw_top_fixed`.
    static let bath_jaw_top_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_jaw_top_fixed")
    /// Image `bath_jaw_top_initial`.
    static let bath_jaw_top_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_jaw_top_initial")
    /// Image `bath_lip_bottom`.
    static let bath_lip_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_lip_bottom")
    /// Image `bath_lip_top`.
    static let bath_lip_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_lip_top")
    /// Image `bath_mirror`.
    static let bath_mirror = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mirror")
    /// Image `bath_mouth_brushed_water_falling_1`.
    static let bath_mouth_brushed_water_falling_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_brushed_water_falling_1")
    /// Image `bath_mouth_brushed_water_falling_2`.
    static let bath_mouth_brushed_water_falling_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_brushed_water_falling_2")
    /// Image `bath_mouth_brushed_water_falling_3`.
    static let bath_mouth_brushed_water_falling_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_brushed_water_falling_3")
    /// Image `bath_mouth_brushed_water`.
    static let bath_mouth_brushed_water = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_brushed_water")
    /// Image `bath_mouth_brushed`.
    static let bath_mouth_brushed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_brushed")
    /// Image `bath_mouth_closed`.
    static let bath_mouth_closed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_closed")
    /// Image `bath_mouth_cold`.
    static let bath_mouth_cold = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_cold")
    /// Image `bath_mouth_inside`.
    static let bath_mouth_inside = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_mouth_inside")
    /// Image `bath_nose`.
    static let bath_nose = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_nose")
    /// Image `bath_paste`.
    static let bath_paste = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_paste")
    /// Image `bath_razor_inuse`.
    static let bath_razor_inuse = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_razor_inuse")
    /// Image `bath_razor_top_part`.
    static let bath_razor_top_part = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_razor_top_part")
    /// Image `bath_razor`.
    static let bath_razor = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_razor")
    /// Image `bath_shirt_fixed`.
    static let bath_shirt_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_shirt_fixed")
    /// Image `bath_shirt_initial`.
    static let bath_shirt_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_shirt_initial")
    /// Image `bath_sink`.
    static let bath_sink = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_sink")
    /// Image `bath_spider_body`.
    static let bath_spider_body = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_spider_body")
    /// Image `bath_spider_face_angry`.
    static let bath_spider_face_angry = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_spider_face_angry")
    /// Image `bath_spider_face_default`.
    static let bath_spider_face_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_spider_face_default")
    /// Image `bath_spider_hands`.
    static let bath_spider_hands = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_spider_hands")
    /// Image `bath_spider_legs`.
    static let bath_spider_legs = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_spider_legs")
    /// Image `bath_stick_left_dirty`.
    static let bath_stick_left_dirty = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_stick_left_dirty")
    /// Image `bath_stick_left_initial`.
    static let bath_stick_left_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_stick_left_initial")
    /// Image `bath_stick_right_dirty`.
    static let bath_stick_right_dirty = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_stick_right_dirty")
    /// Image `bath_stick_right_initial`.
    static let bath_stick_right_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_stick_right_initial")
    /// Image `bath_stick`.
    static let bath_stick = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_stick")
    /// Image `bath_tap_base`.
    static let bath_tap_base = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_base")
    /// Image `bath_tap_cold_valve`.
    static let bath_tap_cold_valve = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_cold_valve")
    /// Image `bath_tap_crane_cold`.
    static let bath_tap_crane_cold = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_crane_cold")
    /// Image `bath_tap_crane_default`.
    static let bath_tap_crane_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_crane_default")
    /// Image `bath_tap_hot_valve`.
    static let bath_tap_hot_valve = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_hot_valve")
    /// Image `bath_tap_steam1`.
    static let bath_tap_steam1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_steam1")
    /// Image `bath_tap_steam2`.
    static let bath_tap_steam2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_steam2")
    /// Image `bath_tap_steam3`.
    static let bath_tap_steam3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_steam3")
    /// Image `bath_tap_water1`.
    static let bath_tap_water1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_water1")
    /// Image `bath_tap_water2`.
    static let bath_tap_water2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_water2")
    /// Image `bath_tap_water3`.
    static let bath_tap_water3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_tap_water3")
    /// Image `bath_thermometer_cold`.
    static let bath_thermometer_cold = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_thermometer_cold")
    /// Image `bath_thermometer`.
    static let bath_thermometer = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_thermometer")
    /// Image `bath_toothbrush_pasted`.
    static let bath_toothbrush_pasted = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_toothbrush_pasted")
    /// Image `bath_toothbrush`.
    static let bath_toothbrush = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_toothbrush")
    /// Image `bath_towel_dry`.
    static let bath_towel_dry = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_towel_dry")
    /// Image `bath_towel_wet`.
    static let bath_towel_wet = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_towel_wet")
    /// Image `bath_web`.
    static let bath_web = Rswift.ImageResource(bundle: R.hostingBundle, name: "bath_web")
    /// Image `bathroom_background`.
    static let bathroom_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_background")
    /// Image `bathroom_bandage`.
    static let bathroom_bandage = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_bandage")
    /// Image `bathroom_comb`.
    static let bathroom_comb = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_comb")
    /// Image `bathroom_hair_fixed`.
    static let bathroom_hair_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_hair_fixed")
    /// Image `bathroom_hair_initial`.
    static let bathroom_hair_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_hair_initial")
    /// Image `bathroom_left_brow`.
    static let bathroom_left_brow = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_left_brow")
    /// Image `bathroom_left_eyeball`.
    static let bathroom_left_eyeball = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_left_eyeball")
    /// Image `bathroom_mouth_default`.
    static let bathroom_mouth_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_mouth_default")
    /// Image `bathroom_mustache`.
    static let bathroom_mustache = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_mustache")
    /// Image `bathroom_pimple1_bleeding`.
    static let bathroom_pimple1_bleeding = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_pimple1_bleeding")
    /// Image `bathroom_pimple1_fixed`.
    static let bathroom_pimple1_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_pimple1_fixed")
    /// Image `bathroom_pimple1_initial`.
    static let bathroom_pimple1_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_pimple1_initial")
    /// Image `bathroom_pimple2`.
    static let bathroom_pimple2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_pimple2")
    /// Image `bathroom_purple_cup`.
    static let bathroom_purple_cup = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_purple_cup")
    /// Image `bathroom_razor`.
    static let bathroom_razor = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_razor")
    /// Image `bathroom_right_brow`.
    static let bathroom_right_brow = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_right_brow")
    /// Image `bathroom_right_eyeball`.
    static let bathroom_right_eyeball = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_right_eyeball")
    /// Image `bathroom_shirt_fixed`.
    static let bathroom_shirt_fixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_shirt_fixed")
    /// Image `bathroom_shirt_initial`.
    static let bathroom_shirt_initial = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_shirt_initial")
    /// Image `bathroom_toothbrush`.
    static let bathroom_toothbrush = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_toothbrush")
    /// Image `bathroom_water`.
    static let bathroom_water = Rswift.ImageResource(bundle: R.hostingBundle, name: "bathroom_water")
    /// Image `blendShapes`.
    static let blendShapes = Rswift.ImageResource(bundle: R.hostingBundle, name: "blendShapes")
    /// Image `geometry`.
    static let geometry = Rswift.ImageResource(bundle: R.hostingBundle, name: "geometry")
    /// Image `restartPressed`.
    static let restartPressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "restartPressed")
    /// Image `restart`.
    static let restart = Rswift.ImageResource(bundle: R.hostingBundle, name: "restart")
    /// Image `texture`.
    static let texture = Rswift.ImageResource(bundle: R.hostingBundle, name: "texture")
    /// Image `transforms`.
    static let transforms = Rswift.ImageResource(bundle: R.hostingBundle, name: "transforms")
    /// Image `videoTexture`.
    static let videoTexture = Rswift.ImageResource(bundle: R.hostingBundle, name: "videoTexture")
    /// Image `warehouse`.
    static let warehouse = Rswift.ImageResource(bundle: R.hostingBundle, name: "warehouse")
    /// Image `wh_candle_fire1`.
    static let wh_candle_fire1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_candle_fire1")
    /// Image `wh_candle_fire2`.
    static let wh_candle_fire2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_candle_fire2")
    /// Image `wh_candle_fire3`.
    static let wh_candle_fire3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_candle_fire3")
    /// Image `wh_candle_fire4`.
    static let wh_candle_fire4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_candle_fire4")
    /// Image `wh_candle_off`.
    static let wh_candle_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_candle_off")
    /// Image `wh_candle_on`.
    static let wh_candle_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_candle_on")
    /// Image `wh_cheese`.
    static let wh_cheese = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_cheese")
    /// Image `wh_lense`.
    static let wh_lense = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_lense")
    /// Image `wh_mouse1`.
    static let wh_mouse1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_mouse1")
    /// Image `wh_mouse2`.
    static let wh_mouse2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_mouse2")
    /// Image `wh_mouse3`.
    static let wh_mouse3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_mouse3")
    /// Image `wh_mouse4`.
    static let wh_mouse4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_mouse4")
    /// Image `wh_mouse5`.
    static let wh_mouse5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wh_mouse5")
    /// Image `wireframeTexture`.
    static let wireframeTexture = Rswift.ImageResource(bundle: R.hostingBundle, name: "wireframeTexture")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "andrii", bundle: ..., traitCollection: ...)`
    static func andrii(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.andrii, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_background", bundle: ..., traitCollection: ...)`
    static func bath_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_bad_spray1", bundle: ..., traitCollection: ...)`
    static func bath_bad_spray1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_bad_spray1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_bad_spray2", bundle: ..., traitCollection: ...)`
    static func bath_bad_spray2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_bad_spray2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_bad_spray3", bundle: ..., traitCollection: ...)`
    static func bath_bad_spray3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_bad_spray3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_blur", bundle: ..., traitCollection: ...)`
    static func bath_blur(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_blur, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_cheek_left_blown", bundle: ..., traitCollection: ...)`
    static func bath_cheek_left_blown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_cheek_left_blown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_cheek_right_blown", bundle: ..., traitCollection: ...)`
    static func bath_cheek_right_blown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_cheek_right_blown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_coldeffect_head1", bundle: ..., traitCollection: ...)`
    static func bath_coldeffect_head1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_coldeffect_head1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_coldeffect_head2", bundle: ..., traitCollection: ...)`
    static func bath_coldeffect_head2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_coldeffect_head2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_coldeffect_nose", bundle: ..., traitCollection: ...)`
    static func bath_coldeffect_nose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_coldeffect_nose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_cup_magenta", bundle: ..., traitCollection: ...)`
    static func bath_cup_magenta(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_cup_magenta, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_cup_magenta_filled", bundle: ..., traitCollection: ...)`
    static func bath_cup_magenta_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_cup_magenta_filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_deodorant", bundle: ..., traitCollection: ...)`
    static func bath_deodorant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_deodorant, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_deodorant_spray_bad", bundle: ..., traitCollection: ...)`
    static func bath_deodorant_spray_bad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_deodorant_spray_bad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_deodorant_spray_good", bundle: ..., traitCollection: ...)`
    static func bath_deodorant_spray_good(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_deodorant_spray_good, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_dirt", bundle: ..., traitCollection: ...)`
    static func bath_dirt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_dirt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_earpiece_left", bundle: ..., traitCollection: ...)`
    static func bath_earpiece_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_earpiece_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_earpiece_right", bundle: ..., traitCollection: ...)`
    static func bath_earpiece_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_earpiece_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_eyes_damaged", bundle: ..., traitCollection: ...)`
    static func bath_eyes_damaged(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_eyes_damaged, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_eyes_default", bundle: ..., traitCollection: ...)`
    static func bath_eyes_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_eyes_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_fly_body", bundle: ..., traitCollection: ...)`
    static func bath_fly_body(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_fly_body, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_fly_nose", bundle: ..., traitCollection: ...)`
    static func bath_fly_nose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_fly_nose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_fly_wings_1", bundle: ..., traitCollection: ...)`
    static func bath_fly_wings_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_fly_wings_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_fly_wings_2", bundle: ..., traitCollection: ...)`
    static func bath_fly_wings_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_fly_wings_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_good_spray1", bundle: ..., traitCollection: ...)`
    static func bath_good_spray1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_good_spray1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_good_spray2", bundle: ..., traitCollection: ...)`
    static func bath_good_spray2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_good_spray2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_good_spray3", bundle: ..., traitCollection: ...)`
    static func bath_good_spray3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_good_spray3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_left_fixed", bundle: ..., traitCollection: ...)`
    static func bath_hair_left_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_left_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_left_initial", bundle: ..., traitCollection: ...)`
    static func bath_hair_left_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_left_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_1", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_10", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_11", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_12", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_13", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_14", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_15", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_16", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_17", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_18", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_19", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_19, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_2", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_20", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_21", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_21, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_3", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_4", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_5", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_6", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_7", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_8", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_piece_9", bundle: ..., traitCollection: ...)`
    static func bath_hair_piece_9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_piece_9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_right_fixed_down", bundle: ..., traitCollection: ...)`
    static func bath_hair_right_fixed_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_right_fixed_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_right_fixed_left", bundle: ..., traitCollection: ...)`
    static func bath_hair_right_fixed_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_right_fixed_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_right_fixed_right", bundle: ..., traitCollection: ...)`
    static func bath_hair_right_fixed_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_right_fixed_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_right_fixed_up", bundle: ..., traitCollection: ...)`
    static func bath_hair_right_fixed_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_right_fixed_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_hair_right_initial", bundle: ..., traitCollection: ...)`
    static func bath_hair_right_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_hair_right_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_head", bundle: ..., traitCollection: ...)`
    static func bath_head(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_head, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_heart", bundle: ..., traitCollection: ...)`
    static func bath_heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_jaw_bottom_fixed", bundle: ..., traitCollection: ...)`
    static func bath_jaw_bottom_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_jaw_bottom_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_jaw_bottom_initial", bundle: ..., traitCollection: ...)`
    static func bath_jaw_bottom_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_jaw_bottom_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_jaw_top_fixed", bundle: ..., traitCollection: ...)`
    static func bath_jaw_top_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_jaw_top_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_jaw_top_initial", bundle: ..., traitCollection: ...)`
    static func bath_jaw_top_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_jaw_top_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_lip_bottom", bundle: ..., traitCollection: ...)`
    static func bath_lip_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_lip_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_lip_top", bundle: ..., traitCollection: ...)`
    static func bath_lip_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_lip_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mirror", bundle: ..., traitCollection: ...)`
    static func bath_mirror(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mirror, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_brushed", bundle: ..., traitCollection: ...)`
    static func bath_mouth_brushed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_brushed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_brushed_water", bundle: ..., traitCollection: ...)`
    static func bath_mouth_brushed_water(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_brushed_water, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_brushed_water_falling_1", bundle: ..., traitCollection: ...)`
    static func bath_mouth_brushed_water_falling_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_brushed_water_falling_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_brushed_water_falling_2", bundle: ..., traitCollection: ...)`
    static func bath_mouth_brushed_water_falling_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_brushed_water_falling_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_brushed_water_falling_3", bundle: ..., traitCollection: ...)`
    static func bath_mouth_brushed_water_falling_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_brushed_water_falling_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_closed", bundle: ..., traitCollection: ...)`
    static func bath_mouth_closed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_closed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_cold", bundle: ..., traitCollection: ...)`
    static func bath_mouth_cold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_cold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_mouth_inside", bundle: ..., traitCollection: ...)`
    static func bath_mouth_inside(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_mouth_inside, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_nose", bundle: ..., traitCollection: ...)`
    static func bath_nose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_nose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_paste", bundle: ..., traitCollection: ...)`
    static func bath_paste(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_paste, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_razor", bundle: ..., traitCollection: ...)`
    static func bath_razor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_razor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_razor_inuse", bundle: ..., traitCollection: ...)`
    static func bath_razor_inuse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_razor_inuse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_razor_top_part", bundle: ..., traitCollection: ...)`
    static func bath_razor_top_part(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_razor_top_part, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_shirt_fixed", bundle: ..., traitCollection: ...)`
    static func bath_shirt_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_shirt_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_shirt_initial", bundle: ..., traitCollection: ...)`
    static func bath_shirt_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_shirt_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_sink", bundle: ..., traitCollection: ...)`
    static func bath_sink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_sink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_spider_body", bundle: ..., traitCollection: ...)`
    static func bath_spider_body(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_spider_body, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_spider_face_angry", bundle: ..., traitCollection: ...)`
    static func bath_spider_face_angry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_spider_face_angry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_spider_face_default", bundle: ..., traitCollection: ...)`
    static func bath_spider_face_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_spider_face_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_spider_hands", bundle: ..., traitCollection: ...)`
    static func bath_spider_hands(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_spider_hands, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_spider_legs", bundle: ..., traitCollection: ...)`
    static func bath_spider_legs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_spider_legs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_stick", bundle: ..., traitCollection: ...)`
    static func bath_stick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_stick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_stick_left_dirty", bundle: ..., traitCollection: ...)`
    static func bath_stick_left_dirty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_stick_left_dirty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_stick_left_initial", bundle: ..., traitCollection: ...)`
    static func bath_stick_left_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_stick_left_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_stick_right_dirty", bundle: ..., traitCollection: ...)`
    static func bath_stick_right_dirty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_stick_right_dirty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_stick_right_initial", bundle: ..., traitCollection: ...)`
    static func bath_stick_right_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_stick_right_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_base", bundle: ..., traitCollection: ...)`
    static func bath_tap_base(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_base, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_cold_valve", bundle: ..., traitCollection: ...)`
    static func bath_tap_cold_valve(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_cold_valve, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_crane_cold", bundle: ..., traitCollection: ...)`
    static func bath_tap_crane_cold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_crane_cold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_crane_default", bundle: ..., traitCollection: ...)`
    static func bath_tap_crane_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_crane_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_hot_valve", bundle: ..., traitCollection: ...)`
    static func bath_tap_hot_valve(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_hot_valve, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_steam1", bundle: ..., traitCollection: ...)`
    static func bath_tap_steam1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_steam1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_steam2", bundle: ..., traitCollection: ...)`
    static func bath_tap_steam2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_steam2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_steam3", bundle: ..., traitCollection: ...)`
    static func bath_tap_steam3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_steam3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_water1", bundle: ..., traitCollection: ...)`
    static func bath_tap_water1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_water1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_water2", bundle: ..., traitCollection: ...)`
    static func bath_tap_water2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_water2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_tap_water3", bundle: ..., traitCollection: ...)`
    static func bath_tap_water3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_tap_water3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_thermometer", bundle: ..., traitCollection: ...)`
    static func bath_thermometer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_thermometer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_thermometer_cold", bundle: ..., traitCollection: ...)`
    static func bath_thermometer_cold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_thermometer_cold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_toothbrush", bundle: ..., traitCollection: ...)`
    static func bath_toothbrush(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_toothbrush, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_toothbrush_pasted", bundle: ..., traitCollection: ...)`
    static func bath_toothbrush_pasted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_toothbrush_pasted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_towel_dry", bundle: ..., traitCollection: ...)`
    static func bath_towel_dry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_towel_dry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_towel_wet", bundle: ..., traitCollection: ...)`
    static func bath_towel_wet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_towel_wet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bath_web", bundle: ..., traitCollection: ...)`
    static func bath_web(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bath_web, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_background", bundle: ..., traitCollection: ...)`
    static func bathroom_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_bandage", bundle: ..., traitCollection: ...)`
    static func bathroom_bandage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_bandage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_comb", bundle: ..., traitCollection: ...)`
    static func bathroom_comb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_comb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_hair_fixed", bundle: ..., traitCollection: ...)`
    static func bathroom_hair_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_hair_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_hair_initial", bundle: ..., traitCollection: ...)`
    static func bathroom_hair_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_hair_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_left_brow", bundle: ..., traitCollection: ...)`
    static func bathroom_left_brow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_left_brow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_left_eyeball", bundle: ..., traitCollection: ...)`
    static func bathroom_left_eyeball(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_left_eyeball, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_mouth_default", bundle: ..., traitCollection: ...)`
    static func bathroom_mouth_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_mouth_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_mustache", bundle: ..., traitCollection: ...)`
    static func bathroom_mustache(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_mustache, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_pimple1_bleeding", bundle: ..., traitCollection: ...)`
    static func bathroom_pimple1_bleeding(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_pimple1_bleeding, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_pimple1_fixed", bundle: ..., traitCollection: ...)`
    static func bathroom_pimple1_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_pimple1_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_pimple1_initial", bundle: ..., traitCollection: ...)`
    static func bathroom_pimple1_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_pimple1_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_pimple2", bundle: ..., traitCollection: ...)`
    static func bathroom_pimple2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_pimple2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_purple_cup", bundle: ..., traitCollection: ...)`
    static func bathroom_purple_cup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_purple_cup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_razor", bundle: ..., traitCollection: ...)`
    static func bathroom_razor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_razor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_right_brow", bundle: ..., traitCollection: ...)`
    static func bathroom_right_brow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_right_brow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_right_eyeball", bundle: ..., traitCollection: ...)`
    static func bathroom_right_eyeball(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_right_eyeball, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_shirt_fixed", bundle: ..., traitCollection: ...)`
    static func bathroom_shirt_fixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_shirt_fixed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_shirt_initial", bundle: ..., traitCollection: ...)`
    static func bathroom_shirt_initial(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_shirt_initial, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_toothbrush", bundle: ..., traitCollection: ...)`
    static func bathroom_toothbrush(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_toothbrush, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bathroom_water", bundle: ..., traitCollection: ...)`
    static func bathroom_water(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bathroom_water, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blendShapes", bundle: ..., traitCollection: ...)`
    static func blendShapes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blendShapes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "geometry", bundle: ..., traitCollection: ...)`
    static func geometry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.geometry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "restart", bundle: ..., traitCollection: ...)`
    static func restart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "restartPressed", bundle: ..., traitCollection: ...)`
    static func restartPressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restartPressed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "texture", bundle: ..., traitCollection: ...)`
    static func texture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.texture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transforms", bundle: ..., traitCollection: ...)`
    static func transforms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transforms, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "videoTexture", bundle: ..., traitCollection: ...)`
    static func videoTexture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoTexture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "warehouse", bundle: ..., traitCollection: ...)`
    static func warehouse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.warehouse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_candle_fire1", bundle: ..., traitCollection: ...)`
    static func wh_candle_fire1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_candle_fire1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_candle_fire2", bundle: ..., traitCollection: ...)`
    static func wh_candle_fire2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_candle_fire2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_candle_fire3", bundle: ..., traitCollection: ...)`
    static func wh_candle_fire3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_candle_fire3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_candle_fire4", bundle: ..., traitCollection: ...)`
    static func wh_candle_fire4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_candle_fire4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_candle_off", bundle: ..., traitCollection: ...)`
    static func wh_candle_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_candle_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_candle_on", bundle: ..., traitCollection: ...)`
    static func wh_candle_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_candle_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_cheese", bundle: ..., traitCollection: ...)`
    static func wh_cheese(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_cheese, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_lense", bundle: ..., traitCollection: ...)`
    static func wh_lense(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_lense, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_mouse1", bundle: ..., traitCollection: ...)`
    static func wh_mouse1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_mouse1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_mouse2", bundle: ..., traitCollection: ...)`
    static func wh_mouse2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_mouse2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_mouse3", bundle: ..., traitCollection: ...)`
    static func wh_mouse3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_mouse3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_mouse4", bundle: ..., traitCollection: ...)`
    static func wh_mouse4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_mouse4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wh_mouse5", bundle: ..., traitCollection: ...)`
    static func wh_mouse5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wh_mouse5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wireframeTexture", bundle: ..., traitCollection: ...)`
    static func wireframeTexture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wireframeTexture, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.bath` struct is generated, and contains static references to 123 localization keys.
    struct bath {
      /// Value: angry_spider.mp3
      static let angry_spider_sound = Rswift.StringResource(key: "angry_spider_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: bad_spray.mp3
      static let bad_spray_sound = Rswift.StringResource(key: "bad_spray_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: bad_spray1
      static let bad_spray1 = Rswift.StringResource(key: "bad_spray1", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: bad_spray2
      static let bad_spray2 = Rswift.StringResource(key: "bad_spray2", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: bad_spray3
      static let bad_spray3 = Rswift.StringResource(key: "bad_spray3", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: bandage
      static let bandage = Rswift.StringResource(key: "bandage", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: cold_valve
      static let cold_valve = Rswift.StringResource(key: "cold_valve", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: coldeffect_head
      static let coldeffect_head = Rswift.StringResource(key: "coldeffect_head", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: coldeffect_nose
      static let coldeffect_nose = Rswift.StringResource(key: "coldeffect_nose", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: comb
      static let comb = Rswift.StringResource(key: "comb", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: comb1.mp3
      static let comb1_sound = Rswift.StringResource(key: "comb1_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: comb2.mp3
      static let comb2_sound = Rswift.StringResource(key: "comb2_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: crane
      static let crane = Rswift.StringResource(key: "crane", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ding.mp3
      static let ding_sound = Rswift.StringResource(key: "ding_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: dirt
      static let dirt = Rswift.StringResource(key: "dirt", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ear_left
      static let ear_left = Rswift.StringResource(key: "ear_left", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ear_right
      static let ear_right = Rswift.StringResource(key: "ear_right", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ear_stick
      static let ear_stick = Rswift.StringResource(key: "ear_stick", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: earpiece_left
      static let earpiece_left = Rswift.StringResource(key: "earpiece_left", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: earpiece_right
      static let earpiece_right = Rswift.StringResource(key: "earpiece_right", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: eyes
      static let eyes = Rswift.StringResource(key: "eyes", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: filling_glass.mp3
      static let fill_cup_sound = Rswift.StringResource(key: "fill_cup_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: fixing_spray.mp3
      static let fixing_spray_sound = Rswift.StringResource(key: "fixing_spray_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: fly
      static let fly = Rswift.StringResource(key: "fly", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: fly.mp3
      static let fly_sound = Rswift.StringResource(key: "fly_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: fly_body
      static let fly_body = Rswift.StringResource(key: "fly_body", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: fly_nose
      static let fly_nose = Rswift.StringResource(key: "fly_nose", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: fly_wings
      static let fly_wings = Rswift.StringResource(key: "fly_wings", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: good_spray1
      static let good_spray1 = Rswift.StringResource(key: "good_spray1", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: good_spray2
      static let good_spray2 = Rswift.StringResource(key: "good_spray2", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: good_spray3
      static let good_spray3 = Rswift.StringResource(key: "good_spray3", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_left_fixed
      static let hair_left_fixed = Rswift.StringResource(key: "hair_left_fixed", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_left_initial
      static let hair_left_initial = Rswift.StringResource(key: "hair_left_initial", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_piece
      static let hair_piece = Rswift.StringResource(key: "hair_piece", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_right_fixed_down
      static let hair_right_fixed_down = Rswift.StringResource(key: "hair_right_fixed_down", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_right_fixed_left
      static let hair_right_fixed_left = Rswift.StringResource(key: "hair_right_fixed_left", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_right_fixed_right
      static let hair_right_fixed_right = Rswift.StringResource(key: "hair_right_fixed_right", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_right_fixed_up
      static let hair_right_fixed_up = Rswift.StringResource(key: "hair_right_fixed_up", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hair_right_initial
      static let hair_right_initial = Rswift.StringResource(key: "hair_right_initial", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: heart1
      static let heart1 = Rswift.StringResource(key: "heart1", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: heart2
      static let heart2 = Rswift.StringResource(key: "heart2", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: heart3
      static let heart3 = Rswift.StringResource(key: "heart3", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: hot_valve
      static let hot_valve = Rswift.StringResource(key: "hot_valve", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: item_land.mp3
      static let land_sound = Rswift.StringResource(key: "land_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: jaw_bottom
      static let jaw_bottom = Rswift.StringResource(key: "jaw_bottom", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: jaw_top
      static let jaw_top = Rswift.StringResource(key: "jaw_top", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_brow
      static let left_brow = Rswift.StringResource(key: "left_brow", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_cheek
      static let left_cheek = Rswift.StringResource(key: "left_cheek", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: left_eyeball
      static let left_eyeball = Rswift.StringResource(key: "left_eyeball", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: lip_bottom
      static let lip_bottom = Rswift.StringResource(key: "lip_bottom", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: lip_top
      static let lip_top = Rswift.StringResource(key: "lip_top", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: magenta_cup
      static let magenta_cup = Rswift.StringResource(key: "magenta_cup", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mirror1.mp3
      static let mirror1_sound = Rswift.StringResource(key: "mirror1_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mirror2.mp3
      static let mirror2_sound = Rswift.StringResource(key: "mirror2_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mirror3.mp3
      static let mirror3_sound = Rswift.StringResource(key: "mirror3_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mirror4.mp3
      static let mirror4_sound = Rswift.StringResource(key: "mirror4_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mirror5.mp3
      static let mirror5_sound = Rswift.StringResource(key: "mirror5_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mirror6.mp3
      static let mirror6_sound = Rswift.StringResource(key: "mirror6_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mirror_shape
      static let mirror_shape = Rswift.StringResource(key: "mirror_shape", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mirror_zone1
      static let mirror_zone1 = Rswift.StringResource(key: "mirror_zone1", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mirror_zone2
      static let mirror_zone2 = Rswift.StringResource(key: "mirror_zone2", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mirror_zone3
      static let mirror_zone3 = Rswift.StringResource(key: "mirror_zone3", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mouth_brushed
      static let mouth_brushed = Rswift.StringResource(key: "mouth_brushed", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mouth_brushed_water
      static let mouth_brushed_water = Rswift.StringResource(key: "mouth_brushed_water", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mouth_cold
      static let mouth_cold = Rswift.StringResource(key: "mouth_cold", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mouth_default
      static let mouth_default = Rswift.StringResource(key: "mouth_default", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mouth_inside
      static let mouth_inside = Rswift.StringResource(key: "mouth_inside", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple1.mp3
      static let pimple1_sound = Rswift.StringResource(key: "pimple1_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple1_bleeding
      static let pimple1_bleedning = Rswift.StringResource(key: "pimple1_bleedning", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple1_fixed
      static let pimple1_fixed = Rswift.StringResource(key: "pimple1_fixed", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple1_initial
      static let pimple1_initial = Rswift.StringResource(key: "pimple1_initial", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple1_pinch_zone
      static let pimple1_pinch_zone = Rswift.StringResource(key: "pimple1_pinch_zone", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple2
      static let pimple2 = Rswift.StringResource(key: "pimple2", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple2.mp3
      static let pimple2_sound = Rswift.StringResource(key: "pimple2_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple2_pinch_zone
      static let pimple2_pinch_zone = Rswift.StringResource(key: "pimple2_pinch_zone", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple3
      static let pimple3 = Rswift.StringResource(key: "pimple3", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple3.mp3
      static let pimple3_sound = Rswift.StringResource(key: "pimple3_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: pimple3_pinch_zone
      static let pimple3_pinch_zone = Rswift.StringResource(key: "pimple3_pinch_zone", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: purple_cup
      static let purple_cup = Rswift.StringResource(key: "purple_cup", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: razor
      static let razor = Rswift.StringResource(key: "razor", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: razor_top
      static let razor_top = Rswift.StringResource(key: "razor_top", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_brow
      static let right_brow = Rswift.StringResource(key: "right_brow", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_cheek
      static let right_cheek = Rswift.StringResource(key: "right_cheek", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: right_eyeball
      static let right_eyeball = Rswift.StringResource(key: "right_eyeball", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: rinsing1.mp3
      static let rinsing1_sound = Rswift.StringResource(key: "rinsing1_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: rinsing2.mp3
      static let rinsing2_sound = Rswift.StringResource(key: "rinsing2_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: shave1.m4a
      static let shave_sound1 = Rswift.StringResource(key: "shave_sound1", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: shave2.m4a
      static let shave_sound2 = Rswift.StringResource(key: "shave_sound2", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: shave3.m4a
      static let shave_sound3 = Rswift.StringResource(key: "shave_sound3", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: shave4.m4a
      static let shave_sound4 = Rswift.StringResource(key: "shave_sound4", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: shave5.m4a
      static let shave_sound5 = Rswift.StringResource(key: "shave_sound5", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: shave6.m4a
      static let shave_sound6 = Rswift.StringResource(key: "shave_sound6", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: shirt_fixed
      static let shirt_fixed = Rswift.StringResource(key: "shirt_fixed", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: shirt_initial
      static let shirt_initial = Rswift.StringResource(key: "shirt_initial", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: shirt_zone
      static let shirt_zone = Rswift.StringResource(key: "shirt_zone", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: spider
      static let spider = Rswift.StringResource(key: "spider", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: spider_body
      static let spider_body = Rswift.StringResource(key: "spider_body", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: spider_face
      static let spider_face = Rswift.StringResource(key: "spider_face", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: spider_hands
      static let spider_hands = Rswift.StringResource(key: "spider_hands", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: spider_legs
      static let spider_legs = Rswift.StringResource(key: "spider_legs", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: spit.mp3
      static let spit_sound = Rswift.StringResource(key: "spit_sound", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: steam1
      static let steam1 = Rswift.StringResource(key: "steam1", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: steam2
      static let steam2 = Rswift.StringResource(key: "steam2", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: steam3
      static let steam3 = Rswift.StringResource(key: "steam3", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: stick_left
      static let stick_left = Rswift.StringResource(key: "stick_left", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: stick_left_swipe
      static let stick_left_swipe = Rswift.StringResource(key: "stick_left_swipe", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: stick_right
      static let stick_right = Rswift.StringResource(key: "stick_right", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: stick_right_swipe
      static let stick_right_swipe = Rswift.StringResource(key: "stick_right_swipe", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: teeth1.mp3
      static let teeth1_sounds = Rswift.StringResource(key: "teeth1_sounds", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: teeth2.mp3
      static let teeth2_sounds = Rswift.StringResource(key: "teeth2_sounds", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: teeth3.mp3
      static let teeth3_sounds = Rswift.StringResource(key: "teeth3_sounds", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: thermometer
      static let thermometer = Rswift.StringResource(key: "thermometer", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: thermometer_line
      static let thermometer_line = Rswift.StringResource(key: "thermometer_line", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: toilet_water
      static let toilet_water = Rswift.StringResource(key: "toilet_water", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: toothbrush
      static let toothbrush = Rswift.StringResource(key: "toothbrush", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: toothbrush_top
      static let toothbrush_top = Rswift.StringResource(key: "toothbrush_top", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: towel_dry
      static let towel_dry = Rswift.StringResource(key: "towel_dry", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: towel_wet
      static let towel_wet = Rswift.StringResource(key: "towel_wet", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: water
      static let water = Rswift.StringResource(key: "water", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: water_falling1
      static let water_falling1 = Rswift.StringResource(key: "water_falling1", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: water_falling2
      static let water_falling2 = Rswift.StringResource(key: "water_falling2", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: water_falling3
      static let water_falling3 = Rswift.StringResource(key: "water_falling3", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: web
      static let web = Rswift.StringResource(key: "web", tableName: "Bath", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: angry_spider.mp3
      static func angry_spider_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("angry_spider_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "angry_spider_sound"
        }

        return NSLocalizedString("angry_spider_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: bad_spray.mp3
      static func bad_spray_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bad_spray_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "bad_spray_sound"
        }

        return NSLocalizedString("bad_spray_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: bad_spray1
      static func bad_spray1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bad_spray1", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "bad_spray1"
        }

        return NSLocalizedString("bad_spray1", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: bad_spray2
      static func bad_spray2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bad_spray2", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "bad_spray2"
        }

        return NSLocalizedString("bad_spray2", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: bad_spray3
      static func bad_spray3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bad_spray3", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "bad_spray3"
        }

        return NSLocalizedString("bad_spray3", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: bandage
      static func bandage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bandage", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "bandage"
        }

        return NSLocalizedString("bandage", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: cold_valve
      static func cold_valve(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cold_valve", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "cold_valve"
        }

        return NSLocalizedString("cold_valve", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: coldeffect_head
      static func coldeffect_head(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("coldeffect_head", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "coldeffect_head"
        }

        return NSLocalizedString("coldeffect_head", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: coldeffect_nose
      static func coldeffect_nose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("coldeffect_nose", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "coldeffect_nose"
        }

        return NSLocalizedString("coldeffect_nose", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: comb
      static func comb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("comb", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "comb"
        }

        return NSLocalizedString("comb", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: comb1.mp3
      static func comb1_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("comb1_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "comb1_sound"
        }

        return NSLocalizedString("comb1_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: comb2.mp3
      static func comb2_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("comb2_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "comb2_sound"
        }

        return NSLocalizedString("comb2_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: crane
      static func crane(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("crane", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "crane"
        }

        return NSLocalizedString("crane", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: ding.mp3
      static func ding_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ding_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "ding_sound"
        }

        return NSLocalizedString("ding_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: dirt
      static func dirt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dirt", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "dirt"
        }

        return NSLocalizedString("dirt", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: ear_left
      static func ear_left(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ear_left", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "ear_left"
        }

        return NSLocalizedString("ear_left", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: ear_right
      static func ear_right(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ear_right", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "ear_right"
        }

        return NSLocalizedString("ear_right", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: ear_stick
      static func ear_stick(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ear_stick", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "ear_stick"
        }

        return NSLocalizedString("ear_stick", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: earpiece_left
      static func earpiece_left(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("earpiece_left", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "earpiece_left"
        }

        return NSLocalizedString("earpiece_left", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: earpiece_right
      static func earpiece_right(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("earpiece_right", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "earpiece_right"
        }

        return NSLocalizedString("earpiece_right", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: eyes
      static func eyes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eyes", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "eyes"
        }

        return NSLocalizedString("eyes", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: filling_glass.mp3
      static func fill_cup_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fill_cup_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "fill_cup_sound"
        }

        return NSLocalizedString("fill_cup_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: fixing_spray.mp3
      static func fixing_spray_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fixing_spray_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "fixing_spray_sound"
        }

        return NSLocalizedString("fixing_spray_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: fly
      static func fly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fly", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "fly"
        }

        return NSLocalizedString("fly", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: fly.mp3
      static func fly_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fly_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "fly_sound"
        }

        return NSLocalizedString("fly_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: fly_body
      static func fly_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fly_body", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "fly_body"
        }

        return NSLocalizedString("fly_body", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: fly_nose
      static func fly_nose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fly_nose", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "fly_nose"
        }

        return NSLocalizedString("fly_nose", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: fly_wings
      static func fly_wings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fly_wings", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "fly_wings"
        }

        return NSLocalizedString("fly_wings", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: good_spray1
      static func good_spray1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("good_spray1", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "good_spray1"
        }

        return NSLocalizedString("good_spray1", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: good_spray2
      static func good_spray2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("good_spray2", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "good_spray2"
        }

        return NSLocalizedString("good_spray2", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: good_spray3
      static func good_spray3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("good_spray3", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "good_spray3"
        }

        return NSLocalizedString("good_spray3", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_left_fixed
      static func hair_left_fixed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_left_fixed", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_left_fixed"
        }

        return NSLocalizedString("hair_left_fixed", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_left_initial
      static func hair_left_initial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_left_initial", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_left_initial"
        }

        return NSLocalizedString("hair_left_initial", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_piece
      static func hair_piece(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_piece", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_piece"
        }

        return NSLocalizedString("hair_piece", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_right_fixed_down
      static func hair_right_fixed_down(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_right_fixed_down", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_right_fixed_down"
        }

        return NSLocalizedString("hair_right_fixed_down", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_right_fixed_left
      static func hair_right_fixed_left(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_right_fixed_left", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_right_fixed_left"
        }

        return NSLocalizedString("hair_right_fixed_left", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_right_fixed_right
      static func hair_right_fixed_right(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_right_fixed_right", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_right_fixed_right"
        }

        return NSLocalizedString("hair_right_fixed_right", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_right_fixed_up
      static func hair_right_fixed_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_right_fixed_up", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_right_fixed_up"
        }

        return NSLocalizedString("hair_right_fixed_up", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hair_right_initial
      static func hair_right_initial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hair_right_initial", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hair_right_initial"
        }

        return NSLocalizedString("hair_right_initial", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: heart1
      static func heart1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heart1", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "heart1"
        }

        return NSLocalizedString("heart1", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: heart2
      static func heart2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heart2", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "heart2"
        }

        return NSLocalizedString("heart2", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: heart3
      static func heart3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("heart3", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "heart3"
        }

        return NSLocalizedString("heart3", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: hot_valve
      static func hot_valve(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hot_valve", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "hot_valve"
        }

        return NSLocalizedString("hot_valve", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: item_land.mp3
      static func land_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("land_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "land_sound"
        }

        return NSLocalizedString("land_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: jaw_bottom
      static func jaw_bottom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jaw_bottom", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "jaw_bottom"
        }

        return NSLocalizedString("jaw_bottom", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: jaw_top
      static func jaw_top(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jaw_top", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "jaw_top"
        }

        return NSLocalizedString("jaw_top", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: left_brow
      static func left_brow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left_brow", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "left_brow"
        }

        return NSLocalizedString("left_brow", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: left_cheek
      static func left_cheek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left_cheek", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "left_cheek"
        }

        return NSLocalizedString("left_cheek", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: left_eyeball
      static func left_eyeball(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("left_eyeball", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "left_eyeball"
        }

        return NSLocalizedString("left_eyeball", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: lip_bottom
      static func lip_bottom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lip_bottom", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "lip_bottom"
        }

        return NSLocalizedString("lip_bottom", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: lip_top
      static func lip_top(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lip_top", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "lip_top"
        }

        return NSLocalizedString("lip_top", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: magenta_cup
      static func magenta_cup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("magenta_cup", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "magenta_cup"
        }

        return NSLocalizedString("magenta_cup", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mirror1.mp3
      static func mirror1_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mirror1_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mirror1_sound"
        }

        return NSLocalizedString("mirror1_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mirror2.mp3
      static func mirror2_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mirror2_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mirror2_sound"
        }

        return NSLocalizedString("mirror2_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mirror3.mp3
      static func mirror3_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mirror3_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mirror3_sound"
        }

        return NSLocalizedString("mirror3_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mirror4.mp3
      static func mirror4_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mirror4_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mirror4_sound"
        }

        return NSLocalizedString("mirror4_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mirror5.mp3
      static func mirror5_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mirror5_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mirror5_sound"
        }

        return NSLocalizedString("mirror5_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mirror6.mp3
      static func mirror6_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mirror6_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mirror6_sound"
        }

        return NSLocalizedString("mirror6_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mirror_shape
      static func mirror_shape(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mirror_shape", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mirror_shape"
        }

        return NSLocalizedString("mirror_shape", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mirror_zone1
      static func mirror_zone1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mirror_zone1", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mirror_zone1"
        }

        return NSLocalizedString("mirror_zone1", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mirror_zone2
      static func mirror_zone2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mirror_zone2", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mirror_zone2"
        }

        return NSLocalizedString("mirror_zone2", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mirror_zone3
      static func mirror_zone3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mirror_zone3", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mirror_zone3"
        }

        return NSLocalizedString("mirror_zone3", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mouth_brushed
      static func mouth_brushed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mouth_brushed", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mouth_brushed"
        }

        return NSLocalizedString("mouth_brushed", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mouth_brushed_water
      static func mouth_brushed_water(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mouth_brushed_water", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mouth_brushed_water"
        }

        return NSLocalizedString("mouth_brushed_water", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mouth_cold
      static func mouth_cold(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mouth_cold", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mouth_cold"
        }

        return NSLocalizedString("mouth_cold", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mouth_default
      static func mouth_default(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mouth_default", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mouth_default"
        }

        return NSLocalizedString("mouth_default", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: mouth_inside
      static func mouth_inside(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mouth_inside", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "mouth_inside"
        }

        return NSLocalizedString("mouth_inside", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple1.mp3
      static func pimple1_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple1_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple1_sound"
        }

        return NSLocalizedString("pimple1_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple1_bleeding
      static func pimple1_bleedning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple1_bleedning", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple1_bleedning"
        }

        return NSLocalizedString("pimple1_bleedning", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple1_fixed
      static func pimple1_fixed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple1_fixed", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple1_fixed"
        }

        return NSLocalizedString("pimple1_fixed", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple1_initial
      static func pimple1_initial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple1_initial", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple1_initial"
        }

        return NSLocalizedString("pimple1_initial", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple1_pinch_zone
      static func pimple1_pinch_zone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple1_pinch_zone", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple1_pinch_zone"
        }

        return NSLocalizedString("pimple1_pinch_zone", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple2
      static func pimple2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple2", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple2"
        }

        return NSLocalizedString("pimple2", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple2.mp3
      static func pimple2_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple2_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple2_sound"
        }

        return NSLocalizedString("pimple2_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple2_pinch_zone
      static func pimple2_pinch_zone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple2_pinch_zone", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple2_pinch_zone"
        }

        return NSLocalizedString("pimple2_pinch_zone", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple3
      static func pimple3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple3", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple3"
        }

        return NSLocalizedString("pimple3", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple3.mp3
      static func pimple3_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple3_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple3_sound"
        }

        return NSLocalizedString("pimple3_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: pimple3_pinch_zone
      static func pimple3_pinch_zone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pimple3_pinch_zone", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "pimple3_pinch_zone"
        }

        return NSLocalizedString("pimple3_pinch_zone", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: purple_cup
      static func purple_cup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purple_cup", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "purple_cup"
        }

        return NSLocalizedString("purple_cup", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: razor
      static func razor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("razor", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "razor"
        }

        return NSLocalizedString("razor", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: razor_top
      static func razor_top(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("razor_top", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "razor_top"
        }

        return NSLocalizedString("razor_top", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: right_brow
      static func right_brow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right_brow", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "right_brow"
        }

        return NSLocalizedString("right_brow", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: right_cheek
      static func right_cheek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right_cheek", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "right_cheek"
        }

        return NSLocalizedString("right_cheek", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: right_eyeball
      static func right_eyeball(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("right_eyeball", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "right_eyeball"
        }

        return NSLocalizedString("right_eyeball", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: rinsing1.mp3
      static func rinsing1_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rinsing1_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "rinsing1_sound"
        }

        return NSLocalizedString("rinsing1_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: rinsing2.mp3
      static func rinsing2_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rinsing2_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "rinsing2_sound"
        }

        return NSLocalizedString("rinsing2_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: shave1.m4a
      static func shave_sound1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shave_sound1", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "shave_sound1"
        }

        return NSLocalizedString("shave_sound1", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: shave2.m4a
      static func shave_sound2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shave_sound2", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "shave_sound2"
        }

        return NSLocalizedString("shave_sound2", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: shave3.m4a
      static func shave_sound3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shave_sound3", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "shave_sound3"
        }

        return NSLocalizedString("shave_sound3", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: shave4.m4a
      static func shave_sound4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shave_sound4", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "shave_sound4"
        }

        return NSLocalizedString("shave_sound4", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: shave5.m4a
      static func shave_sound5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shave_sound5", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "shave_sound5"
        }

        return NSLocalizedString("shave_sound5", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: shave6.m4a
      static func shave_sound6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shave_sound6", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "shave_sound6"
        }

        return NSLocalizedString("shave_sound6", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: shirt_fixed
      static func shirt_fixed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shirt_fixed", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "shirt_fixed"
        }

        return NSLocalizedString("shirt_fixed", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: shirt_initial
      static func shirt_initial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shirt_initial", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "shirt_initial"
        }

        return NSLocalizedString("shirt_initial", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: shirt_zone
      static func shirt_zone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shirt_zone", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "shirt_zone"
        }

        return NSLocalizedString("shirt_zone", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: spider
      static func spider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spider", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "spider"
        }

        return NSLocalizedString("spider", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: spider_body
      static func spider_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spider_body", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "spider_body"
        }

        return NSLocalizedString("spider_body", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: spider_face
      static func spider_face(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spider_face", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "spider_face"
        }

        return NSLocalizedString("spider_face", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: spider_hands
      static func spider_hands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spider_hands", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "spider_hands"
        }

        return NSLocalizedString("spider_hands", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: spider_legs
      static func spider_legs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spider_legs", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "spider_legs"
        }

        return NSLocalizedString("spider_legs", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: spit.mp3
      static func spit_sound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spit_sound", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "spit_sound"
        }

        return NSLocalizedString("spit_sound", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: steam1
      static func steam1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("steam1", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "steam1"
        }

        return NSLocalizedString("steam1", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: steam2
      static func steam2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("steam2", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "steam2"
        }

        return NSLocalizedString("steam2", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: steam3
      static func steam3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("steam3", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "steam3"
        }

        return NSLocalizedString("steam3", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: stick_left
      static func stick_left(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("stick_left", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "stick_left"
        }

        return NSLocalizedString("stick_left", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: stick_left_swipe
      static func stick_left_swipe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("stick_left_swipe", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "stick_left_swipe"
        }

        return NSLocalizedString("stick_left_swipe", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: stick_right
      static func stick_right(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("stick_right", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "stick_right"
        }

        return NSLocalizedString("stick_right", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: stick_right_swipe
      static func stick_right_swipe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("stick_right_swipe", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "stick_right_swipe"
        }

        return NSLocalizedString("stick_right_swipe", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: teeth1.mp3
      static func teeth1_sounds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("teeth1_sounds", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "teeth1_sounds"
        }

        return NSLocalizedString("teeth1_sounds", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: teeth2.mp3
      static func teeth2_sounds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("teeth2_sounds", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "teeth2_sounds"
        }

        return NSLocalizedString("teeth2_sounds", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: teeth3.mp3
      static func teeth3_sounds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("teeth3_sounds", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "teeth3_sounds"
        }

        return NSLocalizedString("teeth3_sounds", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: thermometer
      static func thermometer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thermometer", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "thermometer"
        }

        return NSLocalizedString("thermometer", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: thermometer_line
      static func thermometer_line(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thermometer_line", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "thermometer_line"
        }

        return NSLocalizedString("thermometer_line", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: toilet_water
      static func toilet_water(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toilet_water", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "toilet_water"
        }

        return NSLocalizedString("toilet_water", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: toothbrush
      static func toothbrush(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toothbrush", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "toothbrush"
        }

        return NSLocalizedString("toothbrush", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: toothbrush_top
      static func toothbrush_top(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toothbrush_top", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "toothbrush_top"
        }

        return NSLocalizedString("toothbrush_top", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: towel_dry
      static func towel_dry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("towel_dry", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "towel_dry"
        }

        return NSLocalizedString("towel_dry", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: towel_wet
      static func towel_wet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("towel_wet", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "towel_wet"
        }

        return NSLocalizedString("towel_wet", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: water
      static func water(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "water"
        }

        return NSLocalizedString("water", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: water_falling1
      static func water_falling1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water_falling1", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "water_falling1"
        }

        return NSLocalizedString("water_falling1", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: water_falling2
      static func water_falling2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water_falling2", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "water_falling2"
        }

        return NSLocalizedString("water_falling2", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: water_falling3
      static func water_falling3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water_falling3", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "water_falling3"
        }

        return NSLocalizedString("water_falling3", tableName: "Bath", bundle: bundle, comment: "")
      }

      /// Value: web
      static func web(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("web", tableName: "Bath", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Bath", preferredLanguages: preferredLanguages) else {
          return "web"
        }

        return NSLocalizedString("web", tableName: "Bath", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.wh` struct is generated, and contains static references to 6 localization keys.
    struct wh {
      /// Value: candle
      static let candle = Rswift.StringResource(key: "candle", tableName: "Wh", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: candle_fire
      static let candle_fire = Rswift.StringResource(key: "candle_fire", tableName: "Wh", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: cheese
      static let cheese = Rswift.StringResource(key: "cheese", tableName: "Wh", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: lense
      static let lense = Rswift.StringResource(key: "lense", tableName: "Wh", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mouse
      static let mouse = Rswift.StringResource(key: "mouse", tableName: "Wh", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: warehouse
      static let warehouse = Rswift.StringResource(key: "warehouse", tableName: "Wh", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: candle
      static func candle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("candle", tableName: "Wh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wh", preferredLanguages: preferredLanguages) else {
          return "candle"
        }

        return NSLocalizedString("candle", tableName: "Wh", bundle: bundle, comment: "")
      }

      /// Value: candle_fire
      static func candle_fire(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("candle_fire", tableName: "Wh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wh", preferredLanguages: preferredLanguages) else {
          return "candle_fire"
        }

        return NSLocalizedString("candle_fire", tableName: "Wh", bundle: bundle, comment: "")
      }

      /// Value: cheese
      static func cheese(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cheese", tableName: "Wh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wh", preferredLanguages: preferredLanguages) else {
          return "cheese"
        }

        return NSLocalizedString("cheese", tableName: "Wh", bundle: bundle, comment: "")
      }

      /// Value: lense
      static func lense(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lense", tableName: "Wh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wh", preferredLanguages: preferredLanguages) else {
          return "lense"
        }

        return NSLocalizedString("lense", tableName: "Wh", bundle: bundle, comment: "")
      }

      /// Value: mouse
      static func mouse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mouse", tableName: "Wh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wh", preferredLanguages: preferredLanguages) else {
          return "mouse"
        }

        return NSLocalizedString("mouse", tableName: "Wh", bundle: bundle, comment: "")
      }

      /// Value: warehouse
      static func warehouse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warehouse", tableName: "Wh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wh", preferredLanguages: preferredLanguages) else {
          return "warehouse"
        }

        return NSLocalizedString("warehouse", tableName: "Wh", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "bath_heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bath_heart' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WarehouseViewController

      let bundle = R.hostingBundle
      let name = "Main"
      let unsupportedDeviceMessage = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "unsupportedDeviceMessage")

      func unsupportedDeviceMessage(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: unsupportedDeviceMessage)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().unsupportedDeviceMessage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'unsupportedDeviceMessage' could not be loaded from storyboard 'Main' as 'UIKit.UIViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
